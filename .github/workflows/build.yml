name: Build & Release

on:
  push:
    branches: [master]
    paths:
      - '.github/workflows/**'
      - 'package.json'
      - 'package-lock.json'
      - 'src/**'
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    permissions:
      contents: write

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: npm ci
        shell: bash

      - name: Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist
        shell: bash

      # üîí √âtape 1 : Recr√©er le certificat PFX depuis le secret (Windows uniquement)
      - name: Recreate PFX certificate
        if: matrix.os == 'windows-latest'
        run: |
          echo $env:PFX_BASE64 | certutil -decode - DeltaArts-Cobblenuutt.pfx
        env:
          PFX_BASE64: ${{ secrets.PFX_BASE64 }}

      # üîí √âtape 2 : Signer les ex√©cutables Windows (.exe)
      - name: Sign Windows executables
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem "dist" -Filter "*.exe" -Recurse | ForEach-Object {
            & "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe" sign `
              /f DeltaArts-Cobblenuutt.pfx `
              /p $env:PFX_PASSWORD `
              /fd SHA256 `
              /tr http://timestamp.sectigo.com `
              /td SHA256 `
              $_.FullName
          }
        env:
          PFX_PASSWORD: ${{ secrets.PFX_PASSWORD }}

      # üîí √âtape 3 (optionnelle) : V√©rifier les signatures
      - name: Verify signatures
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem "dist" -Filter "*.exe" -Recurse | ForEach-Object {
            & "C:\Program Files (x86)\Windows Kits\10\bin\x64\signtool.exe" verify /pa $_.FullName
          }

      # ‚¨áÔ∏è Upload des builds sign√©s (inchang√©)
      - name: Upload build artifacts (filtered)
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: |
            dist/**/*-arm64.dmg
            dist/**/*-arm64.dmg.blockmap
            dist/**/*-x64.dmg
            dist/**/*-x64.dmg.blockmap
            dist/**/*.AppImage
            dist/**/*.exe
            dist/**/*.exe.blockmap
            dist/**/latest.yml
            dist/**/latest-mac.yml
            dist/**/latest-linux.yml
          if-no-files-found: ignore

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true

      - name: List files to be released
        run: |
          echo "Files to upload:"
          ls -lh artifacts || true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name != '' && startsWith(github.ref, 'refs/tags/') && github.ref_name || format('auto-{0}', github.run_number) }}
          name: ${{ startsWith(github.ref, 'refs/tags/') && format('CobbleNuutt Launcher {0}', github.ref_name) || format('CobbleNuutt Launcher {0}', github.run_number) }}
          generate_release_notes: true
          files: |
            artifacts/**/*-arm64.dmg
            artifacts/**/*-arm64.dmg.blockmap
            artifacts/**/*-x64.dmg
            artifacts/**/*-x64.dmg.blockmap
            artifacts/**/*.AppImage
            artifacts/**/*.exe
            artifacts/**/*.exe.blockmap
            artifacts/**/latest.yml
            artifacts/**/latest-mac.yml
            artifacts/**/latest-linux.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
